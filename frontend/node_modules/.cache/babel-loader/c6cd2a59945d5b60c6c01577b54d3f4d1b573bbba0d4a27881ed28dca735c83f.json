{"ast":null,"code":"// import React, { useState } from 'react';\n// import axios from 'axios';\n// import emailjs from 'emailjs-com';\n// import { TextField, Button, Typography, Snackbar, Alert, Grid, Paper, Box } from '@mui/material';\n\n// const EmailRestAPI = () => {\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     email: '',\n//     message: '',\n//   });\n\n//   const [uploadedFileUrl, setUploadedFileUrl] = useState('');\n//   const [openSnackbar, setOpenSnackbar] = useState(false);\n//   const [file, setFile] = useState(null);\n\n//   // Function to handle file selection\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n\n//   // Function to handle file upload\n//   const handleFileUpload = async () => {\n//     if (!file) {\n//       console.error('Please select a file to upload.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n\n//     try {\n//       const response = await axios.post('http://localhost:5001/uploadFile', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       });\n//       setUploadedFileUrl(`http://localhost:5001${response.data.file}`);\n//       console.log('File uploaded successfully:', response.data.file);\n//     } catch (error) {\n//       console.error('Error uploading file:', error);\n//     }\n//   };\n\n//   // Function to handle form submission and send email using EmailJS\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     const { name, email, message } = formData;\n\n//     if (!uploadedFileUrl) {\n//       console.error('Please upload a file first.');\n//       return;\n//     }\n\n//     // Prepare email template parameters for EmailJS\n//     const templateParams = {\n//       to_name: 'Web Wizard',\n//       from_name: name,\n//       from_email: email,\n//       message: message,\n//       attachment_url: uploadedFileUrl,\n//     };\n\n//     try {\n//       // Using emailjs to send email from the client side\n//       const response = await emailjs.send(\n//         'service_cxrroqf', // Your EmailJS service ID\n//         'template_dorbgjd', // Your EmailJS template ID\n//         templateParams,\n//         'o5MLS1yF53Sj3iw2X' // Your EmailJS user ID\n//       );\n\n//       console.log('Email sent successfully:', response.status, response.text);\n\n//       // Clear the form data\n//       setFormData({ name: '', email: '', message: '' });\n//       setUploadedFileUrl('');\n\n//       // Show success snackbar\n//       setOpenSnackbar(true);\n//     } catch (error) {\n//       console.error('Error sending email:', error);\n//     }\n//   };\n\n//   // Handle Snackbar close\n//   const handleCloseSnackbar = (event, reason) => {\n//     if (reason === 'clickaway') {\n//       return;\n//     }\n//     setOpenSnackbar(false);\n//   };\n\n//   return (\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\n//       <Grid item xs={12} sm={8} md={6} lg={4}>\n//         <Paper elevation={3} sx={{ padding: 4 }}>\n//           <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//             Send an Email\n//           </Typography>\n//           <Box component=\"form\" onSubmit={handleSubmit} noValidate>\n//             <input type=\"file\" onChange={handleFileChange} />\n//             <Button\n//               variant=\"contained\"\n//               color=\"secondary\"\n//               fullWidth\n//               sx={{ mt: 2 }}\n//               onClick={handleFileUpload}\n//             >\n//               Upload File\n//             </Button>\n//             <TextField\n//               label=\"Your Name\"\n//               name=\"name\"\n//               variant=\"outlined\"\n//               fullWidth\n//               margin=\"normal\"\n//               value={formData.name}\n//               onChange={(e) => setFormData((prev) => ({ ...prev, name: e.target.value }))}\n//               required\n//             />\n//             <TextField\n//               label=\"Your Email\"\n//               name=\"email\"\n//               variant=\"outlined\"\n//               fullWidth\n//               margin=\"normal\"\n//               value={formData.email}\n//               onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n//               required\n//             />\n//             <TextField\n//               label=\"Your Message\"\n//               name=\"message\"\n//               variant=\"outlined\"\n//               fullWidth\n//               multiline\n//               rows={6}\n//               margin=\"normal\"\n//               value={formData.message}\n//               onChange={(e) => setFormData((prev) => ({ ...prev, message: e.target.value }))}\n//               required\n//             />\n//             <Button\n//               type=\"submit\"\n//               variant=\"contained\"\n//               color=\"primary\"\n//               fullWidth\n//               sx={{ mt: 2 }}\n//             >\n//               Send Email\n//             </Button>\n//           </Box>\n//         </Paper>\n//       </Grid>\n\n//       {/* Snackbar for success message */}\n//       <Snackbar\n//         open={openSnackbar}\n//         autoHideDuration={6000}\n//         onClose={handleCloseSnackbar}\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//       >\n//         <Alert onClose={handleCloseSnackbar} severity=\"success\">\n//           Email sent successfully!\n//         </Alert>\n//       </Snackbar>\n//     </Grid>\n//   );\n// };\n\n// export default EmailRestAPI;","map":{"version":3,"names":[],"sources":["C:/Users/macosta/Desktop/Github/SteelOnline5/frontend/src/components/email/EmailRestAPI.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import emailjs from 'emailjs-com';\r\n// import { TextField, Button, Typography, Snackbar, Alert, Grid, Paper, Box } from '@mui/material';\r\n\r\n// const EmailRestAPI = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     name: '',\r\n//     email: '',\r\n//     message: '',\r\n//   });\r\n\r\n//   const [uploadedFileUrl, setUploadedFileUrl] = useState('');\r\n//   const [openSnackbar, setOpenSnackbar] = useState(false);\r\n//   const [file, setFile] = useState(null);\r\n\r\n//   // Function to handle file selection\r\n//   const handleFileChange = (e) => {\r\n//     setFile(e.target.files[0]);\r\n//   };\r\n\r\n//   // Function to handle file upload\r\n//   const handleFileUpload = async () => {\r\n//     if (!file) {\r\n//       console.error('Please select a file to upload.');\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append('file', file);\r\n\r\n//     try {\r\n//       const response = await axios.post('http://localhost:5001/uploadFile', formData, {\r\n//         headers: {\r\n//           'Content-Type': 'multipart/form-data',\r\n//         },\r\n//       });\r\n//       setUploadedFileUrl(`http://localhost:5001${response.data.file}`);\r\n//       console.log('File uploaded successfully:', response.data.file);\r\n//     } catch (error) {\r\n//       console.error('Error uploading file:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle form submission and send email using EmailJS\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const { name, email, message } = formData;\r\n\r\n//     if (!uploadedFileUrl) {\r\n//       console.error('Please upload a file first.');\r\n//       return;\r\n//     }\r\n\r\n//     // Prepare email template parameters for EmailJS\r\n//     const templateParams = {\r\n//       to_name: 'Web Wizard',\r\n//       from_name: name,\r\n//       from_email: email,\r\n//       message: message,\r\n//       attachment_url: uploadedFileUrl,\r\n//     };\r\n\r\n//     try {\r\n//       // Using emailjs to send email from the client side\r\n//       const response = await emailjs.send(\r\n//         'service_cxrroqf', // Your EmailJS service ID\r\n//         'template_dorbgjd', // Your EmailJS template ID\r\n//         templateParams,\r\n//         'o5MLS1yF53Sj3iw2X' // Your EmailJS user ID\r\n//       );\r\n\r\n//       console.log('Email sent successfully:', response.status, response.text);\r\n\r\n//       // Clear the form data\r\n//       setFormData({ name: '', email: '', message: '' });\r\n//       setUploadedFileUrl('');\r\n\r\n//       // Show success snackbar\r\n//       setOpenSnackbar(true);\r\n//     } catch (error) {\r\n//       console.error('Error sending email:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Handle Snackbar close\r\n//   const handleCloseSnackbar = (event, reason) => {\r\n//     if (reason === 'clickaway') {\r\n//       return;\r\n//     }\r\n//     setOpenSnackbar(false);\r\n//   };\r\n\r\n//   return (\r\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\r\n//       <Grid item xs={12} sm={8} md={6} lg={4}>\r\n//         <Paper elevation={3} sx={{ padding: 4 }}>\r\n//           <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n//             Send an Email\r\n//           </Typography>\r\n//           <Box component=\"form\" onSubmit={handleSubmit} noValidate>\r\n//             <input type=\"file\" onChange={handleFileChange} />\r\n//             <Button\r\n//               variant=\"contained\"\r\n//               color=\"secondary\"\r\n//               fullWidth\r\n//               sx={{ mt: 2 }}\r\n//               onClick={handleFileUpload}\r\n//             >\r\n//               Upload File\r\n//             </Button>\r\n//             <TextField\r\n//               label=\"Your Name\"\r\n//               name=\"name\"\r\n//               variant=\"outlined\"\r\n//               fullWidth\r\n//               margin=\"normal\"\r\n//               value={formData.name}\r\n//               onChange={(e) => setFormData((prev) => ({ ...prev, name: e.target.value }))}\r\n//               required\r\n//             />\r\n//             <TextField\r\n//               label=\"Your Email\"\r\n//               name=\"email\"\r\n//               variant=\"outlined\"\r\n//               fullWidth\r\n//               margin=\"normal\"\r\n//               value={formData.email}\r\n//               onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\r\n//               required\r\n//             />\r\n//             <TextField\r\n//               label=\"Your Message\"\r\n//               name=\"message\"\r\n//               variant=\"outlined\"\r\n//               fullWidth\r\n//               multiline\r\n//               rows={6}\r\n//               margin=\"normal\"\r\n//               value={formData.message}\r\n//               onChange={(e) => setFormData((prev) => ({ ...prev, message: e.target.value }))}\r\n//               required\r\n//             />\r\n//             <Button\r\n//               type=\"submit\"\r\n//               variant=\"contained\"\r\n//               color=\"primary\"\r\n//               fullWidth\r\n//               sx={{ mt: 2 }}\r\n//             >\r\n//               Send Email\r\n//             </Button>\r\n//           </Box>\r\n//         </Paper>\r\n//       </Grid>\r\n\r\n//       {/* Snackbar for success message */}\r\n//       <Snackbar\r\n//         open={openSnackbar}\r\n//         autoHideDuration={6000}\r\n//         onClose={handleCloseSnackbar}\r\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n//       >\r\n//         <Alert onClose={handleCloseSnackbar} severity=\"success\">\r\n//           Email sent successfully!\r\n//         </Alert>\r\n//       </Snackbar>\r\n//     </Grid>\r\n//   );\r\n// };\r\n\r\n// export default EmailRestAPI;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}