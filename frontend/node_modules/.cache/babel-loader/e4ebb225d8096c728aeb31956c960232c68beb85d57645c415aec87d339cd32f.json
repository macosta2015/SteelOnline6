{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\macosta\\\\Desktop\\\\Github\\\\SteelOnline4\\\\frontend\\\\src\\\\components\\\\email\\\\email.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, TextField, Button, Snackbar, Typography, Grid, Alert } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmailList({\n  onEmailAdded\n}) {\n  _s();\n  // Original code from your EmailList component\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState(null);\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const validateEmail = email => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(String(email).toLowerCase());\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateEmail(email)) {\n      setError('Please enter a valid email address.');\n      return;\n    }\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:5001/saveEmail', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (response.ok) {\n        setOpenSnackbar(true);\n        setEmail(''); // Clear the input\n        onEmailAdded(); // Notify parent to refresh the email list\n      } else {\n        throw new Error('Error saving email');\n      }\n    } catch (error) {\n      console.error(error);\n      setError('Error saving email');\n    }\n  };\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenSnackbar(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          padding: 4,\n          borderRadius: 2,\n          boxShadow: 3,\n          backgroundColor: '#f9f9f9'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          align: \"center\",\n          gutterBottom: true,\n          children: \"Add Email to List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Enter Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            error: !!error,\n            helperText: error,\n            variant: \"outlined\",\n            sx: {\n              mb: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            fullWidth: true,\n            children: \"Add Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n          open: openSnackbar,\n          autoHideDuration: 6000,\n          onClose: handleCloseSnackbar,\n          anchorOrigin: {\n            vertical: 'bottom',\n            horizontal: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            onClose: handleCloseSnackbar,\n            severity: \"success\",\n            children: \"Email added successfully!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(EmailList, \"1n8mvzsPrBfLRlDlVsy+s2EVimQ=\");\n_c = EmailList;\nexport default EmailList;\n\n// import React, { useState } from 'react';\n// import { Box, TextField, Button, Snackbar, Typography, Grid, Alert } from '@mui/material';\n\n// function EmailList({ onEmailAdded }) {\n//   const [email, setEmail] = useState('');\n//   const [error, setError] = useState(null);\n//   const [openSnackbar, setOpenSnackbar] = useState(false);\n\n//   const validateEmail = (email) => {\n//     const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     return re.test(String(email).toLowerCase());\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!validateEmail(email)) {\n//       setError('Please enter a valid email address.');\n//       return;\n//     }\n\n//     setError(null);\n\n//     try {\n//       const response = await fetch('http://localhost:5001/saveEmail', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email }),\n//       });\n\n//       if (response.ok) {\n//         setOpenSnackbar(true);\n//         setEmail(''); // Clear the input\n//         onEmailAdded(); // Notify parent to refresh the email list\n//       } else {\n//         throw new Error('Error saving email');\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setError('Error saving email');\n//     }\n//   };\n\n//   const handleCloseSnackbar = (event, reason) => {\n//     if (reason === 'clickaway') {\n//       return;\n//     }\n//     setOpenSnackbar(false);\n//   };\n\n//   return (\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\n//       <Grid item xs={12} sm={10} md={8} lg={6}>\n//         <Box sx={{ padding: 4, borderRadius: 2, boxShadow: 3, backgroundColor: '#f9f9f9' }}>\n//           <Typography variant=\"h5\" align=\"center\" gutterBottom>\n//             Add Email to List\n//           </Typography>\n\n//           <form onSubmit={handleSubmit}>\n//             <TextField\n//               fullWidth\n//               label=\"Enter Email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               error={!!error}\n//               helperText={error}\n//               variant=\"outlined\"\n//               sx={{ mb: 2 }}\n//             />\n//             <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n//               Add Email\n//             </Button>\n//           </form>\n\n//           {/* Snackbar for success */}\n//           <Snackbar\n//             open={openSnackbar}\n//             autoHideDuration={6000}\n//             onClose={handleCloseSnackbar}\n//             anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//           >\n//             <Alert onClose={handleCloseSnackbar} severity=\"success\">\n//               Email added successfully!\n//             </Alert>\n//           </Snackbar>\n//         </Box>\n//       </Grid>\n//     </Grid>\n//   );\n// }\n\n// export default EmailList;\nvar _c;\n$RefreshReg$(_c, \"EmailList\");","map":{"version":3,"names":["React","useState","Box","TextField","Button","Snackbar","Typography","Grid","Alert","jsxDEV","_jsxDEV","EmailList","onEmailAdded","_s","email","setEmail","error","setError","openSnackbar","setOpenSnackbar","validateEmail","re","test","String","toLowerCase","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","console","handleCloseSnackbar","event","reason","container","justifyContent","alignItems","children","item","xs","sx","padding","borderRadius","boxShadow","backgroundColor","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","fullWidth","label","value","onChange","target","helperText","mb","type","color","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","_c","$RefreshReg$"],"sources":["C:/Users/macosta/Desktop/Github/SteelOnline4/frontend/src/components/email/email.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Box, TextField, Button, Snackbar, Typography, Grid, Alert } from '@mui/material';\r\n\r\nfunction EmailList({ onEmailAdded }) {\r\n  // Original code from your EmailList component\r\n  const [email, setEmail] = useState('');\r\n  const [error, setError] = useState(null);\r\n  const [openSnackbar, setOpenSnackbar] = useState(false);\r\n\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!validateEmail(email)) {\r\n      setError('Please enter a valid email address.');\r\n      return;\r\n    }\r\n    setError(null);\r\n    try {\r\n      const response = await fetch('http://localhost:5001/saveEmail', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n      if (response.ok) {\r\n        setOpenSnackbar(true);\r\n        setEmail(''); // Clear the input\r\n        onEmailAdded(); // Notify parent to refresh the email list\r\n      } else {\r\n        throw new Error('Error saving email');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      setError('Error saving email');\r\n    }\r\n  };\r\n\r\n  const handleCloseSnackbar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenSnackbar(false);\r\n  };\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\" alignItems=\"center\">\r\n      <Grid item xs={12}>\r\n        <Box sx={{ padding: 4, borderRadius: 2, boxShadow: 3, backgroundColor: '#f9f9f9' }}>\r\n          <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n            Add Email to List\r\n          </Typography>\r\n          <form onSubmit={handleSubmit}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Enter Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              error={!!error}\r\n              helperText={error}\r\n              variant=\"outlined\"\r\n              sx={{ mb: 2 }}\r\n            />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n              Add Email\r\n            </Button>\r\n          </form>\r\n          <Snackbar\r\n            open={openSnackbar}\r\n            autoHideDuration={6000}\r\n            onClose={handleCloseSnackbar}\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n          >\r\n            <Alert onClose={handleCloseSnackbar} severity=\"success\">\r\n              Email added successfully!\r\n            </Alert>\r\n          </Snackbar>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default EmailList;\r\n\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import { Box, TextField, Button, Snackbar, Typography, Grid, Alert } from '@mui/material';\r\n\r\n// function EmailList({ onEmailAdded }) {\r\n//   const [email, setEmail] = useState('');\r\n//   const [error, setError] = useState(null);\r\n//   const [openSnackbar, setOpenSnackbar] = useState(false);\r\n\r\n//   const validateEmail = (email) => {\r\n//     const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n//     return re.test(String(email).toLowerCase());\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!validateEmail(email)) {\r\n//       setError('Please enter a valid email address.');\r\n//       return;\r\n//     }\r\n\r\n//     setError(null);\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:5001/saveEmail', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ email }),\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         setOpenSnackbar(true);\r\n//         setEmail(''); // Clear the input\r\n//         onEmailAdded(); // Notify parent to refresh the email list\r\n//       } else {\r\n//         throw new Error('Error saving email');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       setError('Error saving email');\r\n//     }\r\n//   };\r\n\r\n//   const handleCloseSnackbar = (event, reason) => {\r\n//     if (reason === 'clickaway') {\r\n//       return;\r\n//     }\r\n//     setOpenSnackbar(false);\r\n//   };\r\n\r\n//   return (\r\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\r\n//       <Grid item xs={12} sm={10} md={8} lg={6}>\r\n//         <Box sx={{ padding: 4, borderRadius: 2, boxShadow: 3, backgroundColor: '#f9f9f9' }}>\r\n//           <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n//             Add Email to List\r\n//           </Typography>\r\n\r\n//           <form onSubmit={handleSubmit}>\r\n//             <TextField\r\n//               fullWidth\r\n//               label=\"Enter Email\"\r\n//               value={email}\r\n//               onChange={(e) => setEmail(e.target.value)}\r\n//               error={!!error}\r\n//               helperText={error}\r\n//               variant=\"outlined\"\r\n//               sx={{ mb: 2 }}\r\n//             />\r\n//             <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n//               Add Email\r\n//             </Button>\r\n//           </form>\r\n\r\n//           {/* Snackbar for success */}\r\n//           <Snackbar\r\n//             open={openSnackbar}\r\n//             autoHideDuration={6000}\r\n//             onClose={handleCloseSnackbar}\r\n//             anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n//           >\r\n//             <Alert onClose={handleCloseSnackbar} severity=\"success\">\r\n//               Email added successfully!\r\n//             </Alert>\r\n//           </Snackbar>\r\n//         </Box>\r\n//       </Grid>\r\n//     </Grid>\r\n//   );\r\n// }\r\n\r\n// export default EmailList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}