{"ast":null,"code":"var _jsxFileName = \"/Users/marioacosta/Documents/GitHub/SteelOnline3/frontend/src/components/email/email.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Box, TextField, Button, Snackbar, Typography, Grid, Alert } from '@mui/material';\n\n// function EmailList({ onEmailAdded }) {\n//   // Original code from your EmailList component\n//   const [email, setEmail] = useState('');\n//   const [error, setError] = useState(null);\n//   const [openSnackbar, setOpenSnackbar] = useState(false);\n\n//   const validateEmail = (email) => {\n//     const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     return re.test(String(email).toLowerCase());\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateEmail(email)) {\n//       setError('Please enter a valid email address.');\n//       return;\n//     }\n//     setError(null);\n//     try {\n//       const response = await fetch('http://localhost:5001/saveEmail', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email }),\n//       });\n//       if (response.ok) {\n//         setOpenSnackbar(true);\n//         setEmail(''); // Clear the input\n//         onEmailAdded(); // Notify parent to refresh the email list\n//       } else {\n//         throw new Error('Error saving email');\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setError('Error saving email');\n//     }\n//   };\n\n//   const handleCloseSnackbar = (event, reason) => {\n//     if (reason === 'clickaway') {\n//       return;\n//     }\n//     setOpenSnackbar(false);\n//   };\n\n//   return (\n//     <Grid container justifyContent=\"center\" alignItems=\"center\">\n//       <Grid item xs={12}>\n//         <Box sx={{ padding: 4, borderRadius: 2, boxShadow: 3, backgroundColor: '#f9f9f9' }}>\n//           <Typography variant=\"h5\" align=\"center\" gutterBottom>\n//             Add Email to List\n//           </Typography>\n//           <form onSubmit={handleSubmit}>\n//             <TextField\n//               fullWidth\n//               label=\"Enter Email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               error={!!error}\n//               helperText={error}\n//               variant=\"outlined\"\n//               sx={{ mb: 2 }}\n//             />\n//             <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n//               Add Email\n//             </Button>\n//           </form>\n//           <Snackbar\n//             open={openSnackbar}\n//             autoHideDuration={6000}\n//             onClose={handleCloseSnackbar}\n//             anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//           >\n//             <Alert onClose={handleCloseSnackbar} severity=\"success\">\n//               Email added successfully!\n//             </Alert>\n//           </Snackbar>\n//         </Box>\n//       </Grid>\n//     </Grid>\n//   );\n// }\n\n// export default EmailList;\n\nimport React, { useState } from 'react';\nimport { Box, TextField, Button, Snackbar, Typography, Grid, Alert } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmailList({\n  onEmailAdded\n}) {\n  _s();\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState(null);\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const validateEmail = email => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(String(email).toLowerCase());\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!validateEmail(email)) {\n      setError('Please enter a valid email address.');\n      return;\n    }\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:5001/saveEmail', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (response.ok) {\n        setOpenSnackbar(true);\n        setEmail(''); // Clear the input\n        onEmailAdded(); // Notify parent to refresh the email list\n      } else {\n        throw new Error('Error saving email');\n      }\n    } catch (error) {\n      console.error(error);\n      setError('Error saving email');\n    }\n  };\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenSnackbar(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    sx: {\n      height: '100vh',\n      padding: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 10,\n      md: 8,\n      lg: 6,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          padding: 4,\n          borderRadius: 2,\n          boxShadow: 3,\n          backgroundColor: '#f9f9f9'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          align: \"center\",\n          gutterBottom: true,\n          children: \"Add Email to List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Enter Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            error: !!error,\n            helperText: error,\n            variant: \"outlined\",\n            sx: {\n              mb: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            fullWidth: true,\n            children: \"Add Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n          open: openSnackbar,\n          autoHideDuration: 6000,\n          onClose: handleCloseSnackbar,\n          anchorOrigin: {\n            vertical: 'bottom',\n            horizontal: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            onClose: handleCloseSnackbar,\n            severity: \"success\",\n            children: \"Email added successfully!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(EmailList, \"1n8mvzsPrBfLRlDlVsy+s2EVimQ=\");\n_c = EmailList;\nexport default EmailList;\nvar _c;\n$RefreshReg$(_c, \"EmailList\");","map":{"version":3,"names":["React","useState","Box","TextField","Button","Snackbar","Typography","Grid","Alert","jsxDEV","_jsxDEV","EmailList","onEmailAdded","_s","email","setEmail","error","setError","openSnackbar","setOpenSnackbar","validateEmail","re","test","String","toLowerCase","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","console","handleCloseSnackbar","event","reason","container","justifyContent","alignItems","sx","height","padding","children","item","xs","sm","md","lg","borderRadius","boxShadow","backgroundColor","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","fullWidth","label","value","onChange","target","helperText","mb","type","color","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","_c","$RefreshReg$"],"sources":["/Users/marioacosta/Documents/GitHub/SteelOnline3/frontend/src/components/email/email.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { Box, TextField, Button, Snackbar, Typography, Grid, Alert } from '@mui/material';\n\n// function EmailList({ onEmailAdded }) {\n//   // Original code from your EmailList component\n//   const [email, setEmail] = useState('');\n//   const [error, setError] = useState(null);\n//   const [openSnackbar, setOpenSnackbar] = useState(false);\n\n//   const validateEmail = (email) => {\n//     const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n//     return re.test(String(email).toLowerCase());\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validateEmail(email)) {\n//       setError('Please enter a valid email address.');\n//       return;\n//     }\n//     setError(null);\n//     try {\n//       const response = await fetch('http://localhost:5001/saveEmail', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email }),\n//       });\n//       if (response.ok) {\n//         setOpenSnackbar(true);\n//         setEmail(''); // Clear the input\n//         onEmailAdded(); // Notify parent to refresh the email list\n//       } else {\n//         throw new Error('Error saving email');\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       setError('Error saving email');\n//     }\n//   };\n\n//   const handleCloseSnackbar = (event, reason) => {\n//     if (reason === 'clickaway') {\n//       return;\n//     }\n//     setOpenSnackbar(false);\n//   };\n\n//   return (\n//     <Grid container justifyContent=\"center\" alignItems=\"center\">\n//       <Grid item xs={12}>\n//         <Box sx={{ padding: 4, borderRadius: 2, boxShadow: 3, backgroundColor: '#f9f9f9' }}>\n//           <Typography variant=\"h5\" align=\"center\" gutterBottom>\n//             Add Email to List\n//           </Typography>\n//           <form onSubmit={handleSubmit}>\n//             <TextField\n//               fullWidth\n//               label=\"Enter Email\"\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//               error={!!error}\n//               helperText={error}\n//               variant=\"outlined\"\n//               sx={{ mb: 2 }}\n//             />\n//             <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n//               Add Email\n//             </Button>\n//           </form>\n//           <Snackbar\n//             open={openSnackbar}\n//             autoHideDuration={6000}\n//             onClose={handleCloseSnackbar}\n//             anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//           >\n//             <Alert onClose={handleCloseSnackbar} severity=\"success\">\n//               Email added successfully!\n//             </Alert>\n//           </Snackbar>\n//         </Box>\n//       </Grid>\n//     </Grid>\n//   );\n// }\n\n// export default EmailList;\n\n\nimport React, { useState } from 'react';\nimport { Box, TextField, Button, Snackbar, Typography, Grid, Alert } from '@mui/material';\n\nfunction EmailList({ onEmailAdded }) {\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState(null);\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n\n  const validateEmail = (email) => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(String(email).toLowerCase());\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!validateEmail(email)) {\n      setError('Please enter a valid email address.');\n      return;\n    }\n\n    setError(null);\n\n    try {\n      const response = await fetch('http://localhost:5001/saveEmail', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email }),\n      });\n\n      if (response.ok) {\n        setOpenSnackbar(true);\n        setEmail(''); // Clear the input\n        onEmailAdded(); // Notify parent to refresh the email list\n      } else {\n        throw new Error('Error saving email');\n      }\n    } catch (error) {\n      console.error(error);\n      setError('Error saving email');\n    }\n  };\n\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenSnackbar(false);\n  };\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\n      <Grid item xs={12} sm={10} md={8} lg={6}>\n        <Box sx={{ padding: 4, borderRadius: 2, boxShadow: 3, backgroundColor: '#f9f9f9' }}>\n          <Typography variant=\"h5\" align=\"center\" gutterBottom>\n            Add Email to List\n          </Typography>\n\n          <form onSubmit={handleSubmit}>\n            <TextField\n              fullWidth\n              label=\"Enter Email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              error={!!error}\n              helperText={error}\n              variant=\"outlined\"\n              sx={{ mb: 2 }}\n            />\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\n              Add Email\n            </Button>\n          </form>\n\n          {/* Snackbar for success */}\n          <Snackbar\n            open={openSnackbar}\n            autoHideDuration={6000}\n            onClose={handleCloseSnackbar}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n          >\n            <Alert onClose={handleCloseSnackbar} severity=\"success\">\n              Email added successfully!\n            </Alert>\n          </Snackbar>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default EmailList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}