{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\macosta\\\\Desktop\\\\Github\\\\SteelOnline5\\\\frontend\\\\src\\\\components\\\\email\\\\EmailRestAPI.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport emailjs from 'emailjs-com';\nimport { TextField, Button, Typography, Snackbar, Alert, Grid, Paper, Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailRestAPI = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n  const [uploadedFileUrl, setUploadedFileUrl] = useState('');\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [openFileSnackbar, setOpenFileSnackbar] = useState(false);\n  const [file, setFile] = useState(null);\n\n  // State for errors\n  const [error, setError] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n\n  // Function to handle file selection\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n\n  // Validate email format\n  const validateEmail = email => {\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return re.test(String(email).toLowerCase());\n  };\n\n  // Validate form fields\n  const validateForm = () => {\n    let valid = true;\n    let newError = {\n      name: '',\n      email: '',\n      message: ''\n    };\n\n    // Validate name\n    if (formData.name.trim() === '') {\n      newError.name = 'Name is required.';\n      valid = false;\n    }\n\n    // Validate email\n    if (!validateEmail(formData.email)) {\n      newError.email = 'Please enter a valid email address.';\n      valid = false;\n    }\n\n    // Validate message\n    if (formData.message.trim() === '') {\n      newError.message = 'Message is required.';\n      valid = false;\n    }\n    setError(newError);\n    return valid;\n  };\n\n  // Function to handle file upload\n  const handleFileUpload = async () => {\n    if (!file) {\n      console.error('Please select a file to upload.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('http://localhost:5001/uploadFile', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setUploadedFileUrl(`http://localhost:5001${response.data.file}`);\n      console.log('File uploaded successfully:', response.data.file);\n\n      // Show success snackbar for file upload\n      setOpenFileSnackbar(true);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  };\n\n  // Function to handle form submission and send email using EmailJS\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate form before submitting\n    if (!validateForm()) {\n      return;\n    }\n    const {\n      name,\n      email,\n      message\n    } = formData;\n    if (!uploadedFileUrl) {\n      console.error('Please upload a file first.');\n      return;\n    }\n\n    // Prepare email template parameters for EmailJS\n    const templateParams = {\n      to_name: 'Web Wizard',\n      from_name: name,\n      from_email: email,\n      message: message,\n      attachment_url: uploadedFileUrl\n    };\n    try {\n      // Using emailjs to send email from the client side\n      const response = await emailjs.send('service_cxrroqf',\n      // Your EmailJS service ID\n      'template_dorbgjd',\n      // Your EmailJS template ID\n      templateParams, 'o5MLS1yF53Sj3iw2X' // Your EmailJS user ID\n      );\n      console.log('Email sent successfully:', response.status, response.text);\n\n      // Clear the form data\n      setFormData({\n        name: '',\n        email: '',\n        message: ''\n      });\n      setUploadedFileUrl('');\n\n      // Show success snackbar for email sending\n      setOpenSnackbar(true);\n    } catch (error) {\n      console.error('Error sending email:', error);\n    }\n  };\n\n  // Handle Snackbar close for email success\n  const handleCloseSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenSnackbar(false);\n  };\n\n  // Handle Snackbar close for file upload success\n  const handleCloseFileSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenFileSnackbar(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    sx: {\n      height: '100vh',\n      padding: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 8,\n      md: 6,\n      lg: 4,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          padding: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          align: \"center\",\n          gutterBottom: true,\n          children: \"Send an Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          component: \"form\",\n          onSubmit: handleSubmit,\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            fullWidth: true,\n            sx: {\n              mt: 2\n            },\n            onClick: handleFileUpload,\n            children: \"Upload File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Your Name\",\n            name: \"name\",\n            variant: \"outlined\",\n            fullWidth: true,\n            margin: \"normal\",\n            value: formData.name,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              name: e.target.value\n            })),\n            error: !!error.name,\n            helperText: error.name,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Your Email\",\n            name: \"email\",\n            variant: \"outlined\",\n            fullWidth: true,\n            margin: \"normal\",\n            value: formData.email,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              email: e.target.value\n            })),\n            error: !!error.email,\n            helperText: error.email,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Your Message\",\n            name: \"message\",\n            variant: \"outlined\",\n            fullWidth: true,\n            multiline: true,\n            rows: 6,\n            margin: \"normal\",\n            value: formData.message,\n            onChange: e => setFormData(prev => ({\n              ...prev,\n              message: e.target.value\n            })),\n            error: !!error.message,\n            helperText: error.message,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            fullWidth: true,\n            sx: {\n              mt: 2\n            },\n            children: \"Send Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSnackbar,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnackbar,\n        severity: \"success\",\n        children: \"Email sent successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openFileSnackbar,\n      autoHideDuration: 6000,\n      onClose: handleCloseFileSnackbar,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseFileSnackbar,\n        severity: \"success\",\n        children: \"File uploaded successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(EmailRestAPI, \"0Tw21711zcSRr4S/jKDv1eD+A6c=\");\n_c = EmailRestAPI;\nexport default EmailRestAPI;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import emailjs from 'emailjs-com';\n// import { TextField, Button, Typography, Snackbar, Alert, Grid, Paper, Box } from '@mui/material';\n\n// const EmailRestAPI = () => {\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     email: '',\n//     message: '',\n//   });\n\n//   const [uploadedFileUrl, setUploadedFileUrl] = useState('');\n//   const [openSnackbar, setOpenSnackbar] = useState(false);  // For email success\n//   const [openFileSnackbar, setOpenFileSnackbar] = useState(false); // For file upload success\n//   const [file, setFile] = useState(null);\n\n//   // Function to handle file selection\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n\n//   // Function to handle file upload\n//   const handleFileUpload = async () => {\n//     if (!file) {\n//       console.error('Please select a file to upload.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('file', file);\n\n//     try {\n//       const response = await axios.post('http://localhost:5001/uploadFile', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       });\n//       setUploadedFileUrl(`http://localhost:5001${response.data.file}`);\n//       console.log('File uploaded successfully:', response.data.file);\n\n//       // Show success snackbar for file upload\n//       setOpenFileSnackbar(true);\n\n//     } catch (error) {\n//       console.error('Error uploading file:', error);\n//     }\n//   };\n\n//   // Function to handle form submission and send email using EmailJS\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     const { name, email, message } = formData;\n\n//     if (!uploadedFileUrl) {\n//       console.error('Please upload a file first.');\n//       return;\n//     }\n\n//     // Prepare email template parameters for EmailJS\n//     const templateParams = {\n//       to_name: 'Web Wizard',\n//       from_name: name,\n//       from_email: email,\n//       message: message,\n//       attachment_url: uploadedFileUrl,\n//     };\n\n//     try {\n//       // Using emailjs to send email from the client side\n//       const response = await emailjs.send(\n//         'service_cxrroqf', // Your EmailJS service ID\n//         'template_dorbgjd', // Your EmailJS template ID\n//         templateParams,\n//         'o5MLS1yF53Sj3iw2X' // Your EmailJS user ID\n//       );\n\n//       console.log('Email sent successfully:', response.status, response.text);\n\n//       // Clear the form data\n//       setFormData({ name: '', email: '', message: '' });\n//       setUploadedFileUrl('');\n\n//       // Show success snackbar for email sending\n//       setOpenSnackbar(true);\n//     } catch (error) {\n//       console.error('Error sending email:', error);\n//     }\n//   };\n\n//   // Handle Snackbar close for email success\n//   const handleCloseSnackbar = (event, reason) => {\n//     if (reason === 'clickaway') {\n//       return;\n//     }\n//     setOpenSnackbar(false);\n//   };\n\n//   // Handle Snackbar close for file upload success\n//   const handleCloseFileSnackbar = (event, reason) => {\n//     if (reason === 'clickaway') {\n//       return;\n//     }\n//     setOpenFileSnackbar(false);\n//   };\n\n//   return (\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\n//       <Grid item xs={12} sm={8} md={6} lg={4}>\n//         <Paper elevation={3} sx={{ padding: 4 }}>\n//           <Typography variant=\"h4\" align=\"center\" gutterBottom>\n//             Send an Email\n//           </Typography>\n//           <Box component=\"form\" onSubmit={handleSubmit} noValidate>\n//             <input type=\"file\" onChange={handleFileChange} />\n//             <Button\n//               variant=\"contained\"\n//               color=\"secondary\"\n//               fullWidth\n//               sx={{ mt: 2 }}\n//               onClick={handleFileUpload}\n//             >\n//               Upload File\n//             </Button>\n//             <TextField\n//               label=\"Your Name\"\n//               name=\"name\"\n//               variant=\"outlined\"\n//               fullWidth\n//               margin=\"normal\"\n//               value={formData.name}\n//               onChange={(e) => setFormData((prev) => ({ ...prev, name: e.target.value }))}\n//               required\n//             />\n//             <TextField\n//               label=\"Your Email\"\n//               name=\"email\"\n//               variant=\"outlined\"\n//               fullWidth\n//               margin=\"normal\"\n//               value={formData.email}\n//               onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\n//               required\n//             />\n//             <TextField\n//               label=\"Your Message\"\n//               name=\"message\"\n//               variant=\"outlined\"\n//               fullWidth\n//               multiline\n//               rows={6}\n//               margin=\"normal\"\n//               value={formData.message}\n//               onChange={(e) => setFormData((prev) => ({ ...prev, message: e.target.value }))}\n//               required\n//             />\n//             <Button\n//               type=\"submit\"\n//               variant=\"contained\"\n//               color=\"primary\"\n//               fullWidth\n//               sx={{ mt: 2 }}\n//             >\n//               Send Email\n//             </Button>\n//           </Box>\n//         </Paper>\n//       </Grid>\n\n//       {/* Snackbar for email success */}\n//       <Snackbar\n//         open={openSnackbar}\n//         autoHideDuration={6000}\n//         onClose={handleCloseSnackbar}\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//       >\n//         <Alert onClose={handleCloseSnackbar} severity=\"success\">\n//           Email sent successfully!\n//         </Alert>\n//       </Snackbar>\n\n//       {/* Snackbar for file upload success */}\n//       <Snackbar\n//         open={openFileSnackbar}\n//         autoHideDuration={6000}\n//         onClose={handleCloseFileSnackbar}\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n//       >\n//         <Alert onClose={handleCloseFileSnackbar} severity=\"success\">\n//           File uploaded successfully!\n//         </Alert>\n//       </Snackbar>\n//     </Grid>\n//   );\n// };\n\n// export default EmailRestAPI;\nvar _c;\n$RefreshReg$(_c, \"EmailRestAPI\");","map":{"version":3,"names":["React","useState","axios","emailjs","TextField","Button","Typography","Snackbar","Alert","Grid","Paper","Box","jsxDEV","_jsxDEV","EmailRestAPI","_s","formData","setFormData","name","email","message","uploadedFileUrl","setUploadedFileUrl","openSnackbar","setOpenSnackbar","openFileSnackbar","setOpenFileSnackbar","file","setFile","error","setError","handleFileChange","e","target","files","validateEmail","re","test","String","toLowerCase","validateForm","valid","newError","trim","handleFileUpload","console","FormData","append","response","post","headers","data","log","handleSubmit","preventDefault","templateParams","to_name","from_name","from_email","attachment_url","send","status","text","handleCloseSnackbar","event","reason","handleCloseFileSnackbar","container","justifyContent","alignItems","sx","height","padding","children","item","xs","sm","md","lg","elevation","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","component","onSubmit","noValidate","type","onChange","color","fullWidth","mt","onClick","label","margin","value","prev","helperText","required","multiline","rows","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","_c","$RefreshReg$"],"sources":["C:/Users/macosta/Desktop/Github/SteelOnline5/frontend/src/components/email/EmailRestAPI.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport emailjs from 'emailjs-com';\r\nimport { TextField, Button, Typography, Snackbar, Alert, Grid, Paper, Box } from '@mui/material';\r\n\r\nconst EmailRestAPI = () => {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    message: '',\r\n  });\r\n\r\n  const [uploadedFileUrl, setUploadedFileUrl] = useState('');\r\n  const [openSnackbar, setOpenSnackbar] = useState(false);\r\n  const [openFileSnackbar, setOpenFileSnackbar] = useState(false);\r\n  const [file, setFile] = useState(null);\r\n\r\n  // State for errors\r\n  const [error, setError] = useState({\r\n    name: '',\r\n    email: '',\r\n    message: '',\r\n  });\r\n\r\n  // Function to handle file selection\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n\r\n  // Validate email format\r\n  const validateEmail = (email) => {\r\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  // Validate form fields\r\n  const validateForm = () => {\r\n    let valid = true;\r\n    let newError = { name: '', email: '', message: '' };\r\n\r\n    // Validate name\r\n    if (formData.name.trim() === '') {\r\n      newError.name = 'Name is required.';\r\n      valid = false;\r\n    }\r\n\r\n    // Validate email\r\n    if (!validateEmail(formData.email)) {\r\n      newError.email = 'Please enter a valid email address.';\r\n      valid = false;\r\n    }\r\n\r\n    // Validate message\r\n    if (formData.message.trim() === '') {\r\n      newError.message = 'Message is required.';\r\n      valid = false;\r\n    }\r\n\r\n    setError(newError);\r\n    return valid;\r\n  };\r\n\r\n  // Function to handle file upload\r\n  const handleFileUpload = async () => {\r\n    if (!file) {\r\n      console.error('Please select a file to upload.');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5001/uploadFile', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      setUploadedFileUrl(`http://localhost:5001${response.data.file}`);\r\n      console.log('File uploaded successfully:', response.data.file);\r\n\r\n      // Show success snackbar for file upload\r\n      setOpenFileSnackbar(true);\r\n\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n    }\r\n  };\r\n\r\n  // Function to handle form submission and send email using EmailJS\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate form before submitting\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    const { name, email, message } = formData;\r\n\r\n    if (!uploadedFileUrl) {\r\n      console.error('Please upload a file first.');\r\n      return;\r\n    }\r\n\r\n    // Prepare email template parameters for EmailJS\r\n    const templateParams = {\r\n      to_name: 'Web Wizard',\r\n      from_name: name,\r\n      from_email: email,\r\n      message: message,\r\n      attachment_url: uploadedFileUrl,\r\n    };\r\n\r\n    try {\r\n      // Using emailjs to send email from the client side\r\n      const response = await emailjs.send(\r\n        'service_cxrroqf', // Your EmailJS service ID\r\n        'template_dorbgjd', // Your EmailJS template ID\r\n        templateParams,\r\n        'o5MLS1yF53Sj3iw2X' // Your EmailJS user ID\r\n      );\r\n\r\n      console.log('Email sent successfully:', response.status, response.text);\r\n\r\n      // Clear the form data\r\n      setFormData({ name: '', email: '', message: '' });\r\n      setUploadedFileUrl('');\r\n\r\n      // Show success snackbar for email sending\r\n      setOpenSnackbar(true);\r\n    } catch (error) {\r\n      console.error('Error sending email:', error);\r\n    }\r\n  };\r\n\r\n  // Handle Snackbar close for email success\r\n  const handleCloseSnackbar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenSnackbar(false);\r\n  };\r\n\r\n  // Handle Snackbar close for file upload success\r\n  const handleCloseFileSnackbar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenFileSnackbar(false);\r\n  };\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\r\n      <Grid item xs={12} sm={8} md={6} lg={4}>\r\n        <Paper elevation={3} sx={{ padding: 4 }}>\r\n          <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n            Send an Email\r\n          </Typography>\r\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate>\r\n            <input type=\"file\" onChange={handleFileChange} />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              fullWidth\r\n              sx={{ mt: 2 }}\r\n              onClick={handleFileUpload}\r\n            >\r\n              Upload File\r\n            </Button>\r\n            <TextField\r\n              label=\"Your Name\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              value={formData.name}\r\n              onChange={(e) => setFormData((prev) => ({ ...prev, name: e.target.value }))}\r\n              error={!!error.name}\r\n              helperText={error.name}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"Your Email\"\r\n              name=\"email\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              value={formData.email}\r\n              onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\r\n              error={!!error.email}\r\n              helperText={error.email}\r\n              required\r\n            />\r\n            <TextField\r\n              label=\"Your Message\"\r\n              name=\"message\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              rows={6}\r\n              margin=\"normal\"\r\n              value={formData.message}\r\n              onChange={(e) => setFormData((prev) => ({ ...prev, message: e.target.value }))}\r\n              error={!!error.message}\r\n              helperText={error.message}\r\n              required\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              fullWidth\r\n              sx={{ mt: 2 }}\r\n            >\r\n              Send Email\r\n            </Button>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      {/* Snackbar for email success */}\r\n      <Snackbar\r\n        open={openSnackbar}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity=\"success\">\r\n          Email sent successfully!\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      {/* Snackbar for file upload success */}\r\n      <Snackbar\r\n        open={openFileSnackbar}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseFileSnackbar}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert onClose={handleCloseFileSnackbar} severity=\"success\">\r\n          File uploaded successfully!\r\n        </Alert>\r\n      </Snackbar>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default EmailRestAPI;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import emailjs from 'emailjs-com';\r\n// import { TextField, Button, Typography, Snackbar, Alert, Grid, Paper, Box } from '@mui/material';\r\n\r\n// const EmailRestAPI = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     name: '',\r\n//     email: '',\r\n//     message: '',\r\n//   });\r\n\r\n//   const [uploadedFileUrl, setUploadedFileUrl] = useState('');\r\n//   const [openSnackbar, setOpenSnackbar] = useState(false);  // For email success\r\n//   const [openFileSnackbar, setOpenFileSnackbar] = useState(false); // For file upload success\r\n//   const [file, setFile] = useState(null);\r\n\r\n//   // Function to handle file selection\r\n//   const handleFileChange = (e) => {\r\n//     setFile(e.target.files[0]);\r\n//   };\r\n\r\n//   // Function to handle file upload\r\n//   const handleFileUpload = async () => {\r\n//     if (!file) {\r\n//       console.error('Please select a file to upload.');\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append('file', file);\r\n\r\n//     try {\r\n//       const response = await axios.post('http://localhost:5001/uploadFile', formData, {\r\n//         headers: {\r\n//           'Content-Type': 'multipart/form-data',\r\n//         },\r\n//       });\r\n//       setUploadedFileUrl(`http://localhost:5001${response.data.file}`);\r\n//       console.log('File uploaded successfully:', response.data.file);\r\n\r\n//       // Show success snackbar for file upload\r\n//       setOpenFileSnackbar(true);\r\n\r\n//     } catch (error) {\r\n//       console.error('Error uploading file:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle form submission and send email using EmailJS\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     const { name, email, message } = formData;\r\n\r\n//     if (!uploadedFileUrl) {\r\n//       console.error('Please upload a file first.');\r\n//       return;\r\n//     }\r\n\r\n//     // Prepare email template parameters for EmailJS\r\n//     const templateParams = {\r\n//       to_name: 'Web Wizard',\r\n//       from_name: name,\r\n//       from_email: email,\r\n//       message: message,\r\n//       attachment_url: uploadedFileUrl,\r\n//     };\r\n\r\n//     try {\r\n//       // Using emailjs to send email from the client side\r\n//       const response = await emailjs.send(\r\n//         'service_cxrroqf', // Your EmailJS service ID\r\n//         'template_dorbgjd', // Your EmailJS template ID\r\n//         templateParams,\r\n//         'o5MLS1yF53Sj3iw2X' // Your EmailJS user ID\r\n//       );\r\n\r\n//       console.log('Email sent successfully:', response.status, response.text);\r\n\r\n//       // Clear the form data\r\n//       setFormData({ name: '', email: '', message: '' });\r\n//       setUploadedFileUrl('');\r\n\r\n//       // Show success snackbar for email sending\r\n//       setOpenSnackbar(true);\r\n//     } catch (error) {\r\n//       console.error('Error sending email:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Handle Snackbar close for email success\r\n//   const handleCloseSnackbar = (event, reason) => {\r\n//     if (reason === 'clickaway') {\r\n//       return;\r\n//     }\r\n//     setOpenSnackbar(false);\r\n//   };\r\n\r\n//   // Handle Snackbar close for file upload success\r\n//   const handleCloseFileSnackbar = (event, reason) => {\r\n//     if (reason === 'clickaway') {\r\n//       return;\r\n//     }\r\n//     setOpenFileSnackbar(false);\r\n//   };\r\n\r\n//   return (\r\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\r\n//       <Grid item xs={12} sm={8} md={6} lg={4}>\r\n//         <Paper elevation={3} sx={{ padding: 4 }}>\r\n//           <Typography variant=\"h4\" align=\"center\" gutterBottom>\r\n//             Send an Email\r\n//           </Typography>\r\n//           <Box component=\"form\" onSubmit={handleSubmit} noValidate>\r\n//             <input type=\"file\" onChange={handleFileChange} />\r\n//             <Button\r\n//               variant=\"contained\"\r\n//               color=\"secondary\"\r\n//               fullWidth\r\n//               sx={{ mt: 2 }}\r\n//               onClick={handleFileUpload}\r\n//             >\r\n//               Upload File\r\n//             </Button>\r\n//             <TextField\r\n//               label=\"Your Name\"\r\n//               name=\"name\"\r\n//               variant=\"outlined\"\r\n//               fullWidth\r\n//               margin=\"normal\"\r\n//               value={formData.name}\r\n//               onChange={(e) => setFormData((prev) => ({ ...prev, name: e.target.value }))}\r\n//               required\r\n//             />\r\n//             <TextField\r\n//               label=\"Your Email\"\r\n//               name=\"email\"\r\n//               variant=\"outlined\"\r\n//               fullWidth\r\n//               margin=\"normal\"\r\n//               value={formData.email}\r\n//               onChange={(e) => setFormData((prev) => ({ ...prev, email: e.target.value }))}\r\n//               required\r\n//             />\r\n//             <TextField\r\n//               label=\"Your Message\"\r\n//               name=\"message\"\r\n//               variant=\"outlined\"\r\n//               fullWidth\r\n//               multiline\r\n//               rows={6}\r\n//               margin=\"normal\"\r\n//               value={formData.message}\r\n//               onChange={(e) => setFormData((prev) => ({ ...prev, message: e.target.value }))}\r\n//               required\r\n//             />\r\n//             <Button\r\n//               type=\"submit\"\r\n//               variant=\"contained\"\r\n//               color=\"primary\"\r\n//               fullWidth\r\n//               sx={{ mt: 2 }}\r\n//             >\r\n//               Send Email\r\n//             </Button>\r\n//           </Box>\r\n//         </Paper>\r\n//       </Grid>\r\n\r\n//       {/* Snackbar for email success */}\r\n//       <Snackbar\r\n//         open={openSnackbar}\r\n//         autoHideDuration={6000}\r\n//         onClose={handleCloseSnackbar}\r\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n//       >\r\n//         <Alert onClose={handleCloseSnackbar} severity=\"success\">\r\n//           Email sent successfully!\r\n//         </Alert>\r\n//       </Snackbar>\r\n\r\n//       {/* Snackbar for file upload success */}\r\n//       <Snackbar\r\n//         open={openFileSnackbar}\r\n//         autoHideDuration={6000}\r\n//         onClose={handleCloseFileSnackbar}\r\n//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n//       >\r\n//         <Alert onClose={handleCloseFileSnackbar} severity=\"success\">\r\n//           File uploaded successfully!\r\n//         </Alert>\r\n//       </Snackbar>\r\n//     </Grid>\r\n//   );\r\n// };\r\n\r\n// export default EmailRestAPI;\r\n\r\n"],"mappings":"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3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}