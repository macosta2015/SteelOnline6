{"ast":null,"code":"\n// import React, { useEffect, useState } from 'react';\n// import { Box, Typography, List, ListItem, ListItemText, CircularProgress, Grid, Paper, IconButton, Snackbar, Alert } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n\n// function DisplayEmails({ emailRefreshTrigger }) {\n//   // State for email list, loading, error, and notifications\n//   const [emails, setEmails] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [notification, setNotification] = useState({ open: false, message: '', severity: 'success' });\n\n//   // Fetch emails whenever the component mounts or `emailRefreshTrigger` changes\n//   useEffect(() => {\n//     const fetchEmails = async () => {\n//       setLoading(true);\n//       setError(null);\n\n//       try {\n//         const response = await fetch('http://localhost:5001/emails.txt');\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch emails');\n//         }\n//         const data = await response.text();\n//         const emailList = data.split('\\n').filter(email => email.trim()); // Split by new line and filter out empty strings\n//         setEmails(emailList);\n//       } catch (err) {\n//         setError(err.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchEmails();\n//   }, [emailRefreshTrigger]);\n\n//   // Function to handle the deletion of an email\n//   const handleDelete = async (emailToDelete) => {\n//     try {\n//       const response = await fetch('http://localhost:5001/deleteEmail', {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: emailToDelete }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to delete email');\n//       }\n\n//       // Update the email list state after successful deletion\n//       setEmails(emails.filter(email => email !== emailToDelete));\n//       setNotification({ open: true, message: 'Email deleted successfully', severity: 'success' });\n//     } catch (error) {\n//       console.error('Error deleting email:', error);\n//       setNotification({ open: true, message: 'Failed to delete email', severity: 'error' });\n//     }\n//   };\n\n//   // Function to close the notification Snackbar\n//   const handleCloseNotification = () => {\n//     setNotification({ ...notification, open: false });\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <Typography color=\"error\" sx={{ mt: 2, textAlign: 'center' }}>\n//         Error: {error}\n//       </Typography>\n//     );\n//   }\n\n//   return (\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\n//       <Grid item xs={12} sm={8} md={6} lg={4}>\n//         <Paper elevation={3} sx={{ p: 3, borderRadius: 2, backgroundColor: '#f9f9f9' }}>\n//           <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 'bold', textAlign: 'center' }}>\n//             Emails from File\n//           </Typography>\n//           <List>\n//             {emails.length === 0 ? (\n//               <Typography sx={{ textAlign: 'center', mt: 2 }}>\n//                 No emails available.\n//               </Typography>\n//             ) : (\n//               emails.map((email, index) => (\n//                 <ListItem\n//                   key={index}\n//                   sx={{\n//                     backgroundColor: '#fff',\n//                     mb: 1,\n//                     borderRadius: 1,\n//                     boxShadow: 1,\n//                     '&:hover': {\n//                       backgroundColor: '#f0f0f0',\n//                     },\n//                   }}\n//                 >\n//                   <ListItemText primary={email} sx={{ wordBreak: 'break-all' }} />\n//                   <IconButton\n//                     onClick={() => handleDelete(email)}\n//                     color=\"primary\"\n//                     sx={{ ml: 2 }}\n//                   >\n//                     <DeleteIcon />\n//                   </IconButton>\n//                 </ListItem>\n//               ))\n//             )}\n//           </List>\n//         </Paper>\n//       </Grid>\n//       {/* Notification Snackbar */}\n//       <Snackbar\n//         open={notification.open}\n//         autoHideDuration={6000}\n//         onClose={handleCloseNotification}\n//       >\n//         <Alert onClose={handleCloseNotification} severity={notification.severity} sx={{ width: '100%' }}>\n//           {notification.message}\n//         </Alert>\n//       </Snackbar>\n//     </Grid>\n//   );\n// }\n\n// export default DisplayEmails;","map":{"version":3,"names":[],"sources":["/Users/marioacosta/Documents/GitHub/SteelOnline3/frontend/src/components/email/displayemail.js"],"sourcesContent":["\n// import React, { useEffect, useState } from 'react';\n// import { Box, Typography, List, ListItem, ListItemText, CircularProgress, Grid, Paper, IconButton, Snackbar, Alert } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n\n// function DisplayEmails({ emailRefreshTrigger }) {\n//   // State for email list, loading, error, and notifications\n//   const [emails, setEmails] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [notification, setNotification] = useState({ open: false, message: '', severity: 'success' });\n\n//   // Fetch emails whenever the component mounts or `emailRefreshTrigger` changes\n//   useEffect(() => {\n//     const fetchEmails = async () => {\n//       setLoading(true);\n//       setError(null);\n\n//       try {\n//         const response = await fetch('http://localhost:5001/emails.txt');\n//         if (!response.ok) {\n//           throw new Error('Failed to fetch emails');\n//         }\n//         const data = await response.text();\n//         const emailList = data.split('\\n').filter(email => email.trim()); // Split by new line and filter out empty strings\n//         setEmails(emailList);\n//       } catch (err) {\n//         setError(err.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchEmails();\n//   }, [emailRefreshTrigger]);\n\n//   // Function to handle the deletion of an email\n//   const handleDelete = async (emailToDelete) => {\n//     try {\n//       const response = await fetch('http://localhost:5001/deleteEmail', {\n//         method: 'DELETE',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: emailToDelete }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to delete email');\n//       }\n\n//       // Update the email list state after successful deletion\n//       setEmails(emails.filter(email => email !== emailToDelete));\n//       setNotification({ open: true, message: 'Email deleted successfully', severity: 'success' });\n//     } catch (error) {\n//       console.error('Error deleting email:', error);\n//       setNotification({ open: true, message: 'Failed to delete email', severity: 'error' });\n//     }\n//   };\n\n//   // Function to close the notification Snackbar\n//   const handleCloseNotification = () => {\n//     setNotification({ ...notification, open: false });\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n//         <CircularProgress />\n//       </Box>\n//     );\n//   }\n\n//   if (error) {\n//     return (\n//       <Typography color=\"error\" sx={{ mt: 2, textAlign: 'center' }}>\n//         Error: {error}\n//       </Typography>\n//     );\n//   }\n\n//   return (\n//     <Grid container justifyContent=\"center\" alignItems=\"center\" sx={{ height: '100vh', padding: 2 }}>\n//       <Grid item xs={12} sm={8} md={6} lg={4}>\n//         <Paper elevation={3} sx={{ p: 3, borderRadius: 2, backgroundColor: '#f9f9f9' }}>\n//           <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 'bold', textAlign: 'center' }}>\n//             Emails from File\n//           </Typography>\n//           <List>\n//             {emails.length === 0 ? (\n//               <Typography sx={{ textAlign: 'center', mt: 2 }}>\n//                 No emails available.\n//               </Typography>\n//             ) : (\n//               emails.map((email, index) => (\n//                 <ListItem\n//                   key={index}\n//                   sx={{\n//                     backgroundColor: '#fff',\n//                     mb: 1,\n//                     borderRadius: 1,\n//                     boxShadow: 1,\n//                     '&:hover': {\n//                       backgroundColor: '#f0f0f0',\n//                     },\n//                   }}\n//                 >\n//                   <ListItemText primary={email} sx={{ wordBreak: 'break-all' }} />\n//                   <IconButton\n//                     onClick={() => handleDelete(email)}\n//                     color=\"primary\"\n//                     sx={{ ml: 2 }}\n//                   >\n//                     <DeleteIcon />\n//                   </IconButton>\n//                 </ListItem>\n//               ))\n//             )}\n//           </List>\n//         </Paper>\n//       </Grid>\n//       {/* Notification Snackbar */}\n//       <Snackbar\n//         open={notification.open}\n//         autoHideDuration={6000}\n//         onClose={handleCloseNotification}\n//       >\n//         <Alert onClose={handleCloseNotification} severity={notification.severity} sx={{ width: '100%' }}>\n//           {notification.message}\n//         </Alert>\n//       </Snackbar>\n//     </Grid>\n//   );\n// }\n\n// export default DisplayEmails;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}