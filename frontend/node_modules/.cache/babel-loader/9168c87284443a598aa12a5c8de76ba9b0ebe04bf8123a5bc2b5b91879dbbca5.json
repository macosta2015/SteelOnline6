{"ast":null,"code":"var _jsxFileName = \"/Users/marioacosta/Documents/GitHub/SteelsOnline2/frontend/src/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport EmailList from './components/email/email.js';\nimport DisplayEmails from './components/email/displayemail.js';\nimport App from './App.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nfunction Main() {\n  _s();\n  // Manage the email list and refresh state\n  const [emailRefreshTrigger, setEmailRefreshTrigger] = useState(false); // To trigger re-fetching of emails\n  const [emailList, setEmailList] = useState([]);\n\n  // Trigger to refresh email display when a new email is added\n  const handleEmailAdded = () => {\n    setEmailRefreshTrigger(prev => !prev); // Toggle the state to refresh `DisplayEmails`\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmailList, {\n      emailList: emailList,\n      setEmailList: setEmailList,\n      onEmailAdded: handleEmailAdded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DisplayEmails, {\n      emailRefreshTrigger: emailRefreshTrigger\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Main, \"zy1Unc6/SD5hIgAPEZ+bX3XzN3c=\");\n_c = Main;\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 38,\n  columnNumber: 3\n}, this));\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","ReactDOM","reportWebVitals","EmailList","DisplayEmails","App","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","Main","_s","emailRefreshTrigger","setEmailRefreshTrigger","emailList","setEmailList","handleEmailAdded","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","onEmailAdded","_c","render","StrictMode","$RefreshReg$"],"sources":["/Users/marioacosta/Documents/GitHub/SteelsOnline2/frontend/src/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport EmailList from './components/email/email.js';\nimport DisplayEmails from './components/email/displayemail.js';\n\n\n\nimport App from './App.js';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nfunction Main() {\n  // Manage the email list and refresh state\n  const [emailRefreshTrigger, setEmailRefreshTrigger] = useState(false); // To trigger re-fetching of emails\n  const [emailList, setEmailList] = useState([]);\n\n  // Trigger to refresh email display when a new email is added\n  const handleEmailAdded = () => {\n    setEmailRefreshTrigger(prev => !prev); // Toggle the state to refresh `DisplayEmails`\n  };\n\n  return (\n    <>\n      <App />\n      {/* Pass the handleEmailAdded function to EmailList to trigger refresh */}\n      <EmailList emailList={emailList} setEmailList={setEmailList} onEmailAdded={handleEmailAdded} />\n\n      {/* DisplayEmails will re-fetch whenever emailRefreshTrigger changes */}\n      <DisplayEmails emailRefreshTrigger={emailRefreshTrigger} />\n\n    </>\n  );\n}\n\nroot.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>\n);\n\nreportWebVitals();\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,aAAa,MAAM,oCAAoC;AAI9D,OAAOC,GAAG,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3B,MAAMC,IAAI,GAAGT,QAAQ,CAACU,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEjE,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd;EACA,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvE,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMoB,gBAAgB,GAAGA,CAAA,KAAM;IAC7BH,sBAAsB,CAACI,IAAI,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;EACzC,CAAC;EAED,oBACEd,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACEf,OAAA,CAACF,GAAG;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEPnB,OAAA,CAACJ,SAAS;MAACe,SAAS,EAAEA,SAAU;MAACC,YAAY,EAAEA,YAAa;MAACQ,YAAY,EAAEP;IAAiB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG/FnB,OAAA,CAACH,aAAa;MAACY,mBAAmB,EAAEA;IAAoB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAE3D,CAAC;AAEP;AAACX,EAAA,CArBQD,IAAI;AAAAc,EAAA,GAAJd,IAAI;AAuBbJ,IAAI,CAACmB,MAAM,cACTtB,OAAA,CAACR,KAAK,CAAC+B,UAAU;EAAAR,QAAA,eACff,OAAA,CAACO,IAAI;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACQ,CACpB,CAAC;AAEDxB,eAAe,CAAC,CAAC;AAAC,IAAA0B,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}